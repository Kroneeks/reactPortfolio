{
  "env": {
    "browser": true,
    "node": true,
    "es6": true
  },
  "overrides": [
    {
      "files": "**/*.js",
      "env": {
        "jest": true
      }
    }
  ],
  "extends": ["airbnb", "prettier", "plugin:node/recommended"],
  "plugins": ["prettier"],
  "parser": "@babel/eslint-parser",
  "parserOptions": {
    "sourceType": "module",
    "ecmaFeatures": {
      "modules": true,
      "spread": true,
      "restParams": true,
      "jsx": true
    }
  },
  "rules": {
    "prettier/prettier": "error",
    "no-unused-vars": "warn",
    "no-console": "off",
    "func-names": "off",
    "no-process-exit": "off",
    "object-shorthand": "off",
    "class-methods-use-this": "off",
    "no-return-await": "off",
    "import/first": "off",
    "strict": "off",
    "no-alert": "off",
    "no-else-return": "off",
    "no-use-before-define": "off",
    "import/prefer-default-export": "off",
    "import/no-extraneous-dependencies": "off",
    "node/no-unpublished-require": "off",
    "node/no-unpublished-import": "off",
    "react/react-in-jsx-scope": "off",
    "react/jsx-filename-extension": [1, { "extensions": [".js", ".jsx"] }],
    "react/destructuring-assignment": [
      "off",
      "always",
      { "ignoreClassFields": true }
    ],
    "react/function-component-definition": [
      2,
      {
        "namedComponents": "arrow-function",
        "unnamedComponents": "arrow-function"
      }
    ],
    "jsx-a11y/label-has-associated-control": "off",
    "jsx-a11y/label-has-for": "off",
    "react/jsx-props-no-spreading": "off",
    "react/state-in-constructor": "off",
    "node/no-extraneous-require": [
      "error",
      {
        "allowModules": ["axios"],
        "resolvePaths": [],
        "tryExtensions": []
      }
    ],
    "node/no-unsupported-features/es-syntax": [
      "off",
      {
        "version": ">=8.0.0"
      }
    ],
    "react/button-has-type": "off",
    "react/jsx-curly-brace-presence": "off",
    "react/jsx-boolean-value": "off",
    "no-restricted-syntax": [
      "off",
      "FunctionExpression",
      "WithStatement",
      "BinaryExpression[operator='in']"
    ]
  }
}
